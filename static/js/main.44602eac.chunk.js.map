{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-users/search-user.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","user","id","alt","name","username","email","href","CardList","users","map","key","SearchUser","type","placeholder","onChange","searchUsers","App","e","setState","searchField","target","value","state","userList","fetch","then","response","json","this","filteredUser","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kTAkBeA,G,kBAfF,SAACC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,eAAeC,IAAG,kDAA6CF,EAAMG,KAAKC,GAAxD,QAAkEC,IAAI,eAEvG,yBAAKJ,UAAU,aACX,4BAAQA,UAAU,OAAOD,EAAMG,KAAKG,MACpC,uBAAGL,UAAU,kBAAb,IAAgCD,EAAMG,KAAKI,UAC3C,2BAAIP,EAAMG,KAAKK,OACf,uBAAGC,KAAI,6BAAwBT,EAAMG,KAAKI,UAAYN,UAAU,mBAAhE,mBCMDS,EAdE,SAACV,GACd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,kBAEXD,EAAMW,MAAMC,KAAI,SAAAT,GAAI,OAChB,kBAAC,EAAD,CAAMU,IAAKV,EAAKC,GAAID,KAAMA,UCY/BW,EApBI,SAACd,GAChB,OACQ,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,oCAAd,iCACA,yBAAKA,UAAU,OACf,2BACIc,KAAK,SACLd,UAAU,eACVe,YAAY,mBACZC,SAAUjB,EAAMkB,mBC6B7BC,E,kDAnCb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAcRkB,YAAc,SAACE,GACb,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAdxB,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IALE,E,gEASC,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzB,GAAI,OAAI,EAAKkB,SAAS,CAACK,SAASvB,S,+BAS/B,IAAD,EAC6B4B,KAAKN,MAAhCC,EADF,EACEA,SAAWJ,EADb,EACaA,YACbU,EAAeN,EAASO,QAAO,SAAC9B,GAAD,OACnCA,EAAKG,KAAK4B,cAAcC,SAASb,EAAYY,kBAE/C,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CAAYiB,YAAaa,KAAKb,cAC9B,kBAAC,EAAD,CAAUP,MAAOqB,S,GA9BPI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44602eac.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css';\n\nconst Card = (props) => {\n    return(\n        <div className='card'>\n            <img className=\"card-img-top\" src={`https://randomuser.me/api/portraits/men/${props.user.id}.jpg`} alt=\"Card image\">\n            </img>\n            <div className='card-body'>\n                <strong className='m-0'>{props.user.name}</strong>\n                <p className='text-secondary'>@{props.user.username}</p>\n                <p>{props.user.email}</p>\n                <a href={`https://github.com/${props.user.username}`} className=\"btn btn-primary\">See Profile</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React , { Component } from 'react';\nimport './card-list.style.css';\nimport Card from '../card/card.component';\n\nconst CardList = (props) => {\n    return(\n        <div className='container'>\n            <div className='card-list mt-4'>\n            {\n                props.users.map(user => (\n                    <Card key={user.id} user={user} />\n                ))\n            }   \n            </div>\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchUser = (props) => {\n    return(\n            <div className='container'>\n                <div className='row'>\n                    <div className='form-group mx-auto'>\n                        <h3 className='text-center my-3 text-capitalize'>find best developer's profile</h3>\n                        <div className='col'>\n                        <input\n                            type='search'\n                            className='form-control'\n                            placeholder='Search Developer'\n                            onChange={props.searchUsers}\n                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default SearchUser;","import React , { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchUser from './components/search-users/search-user.component';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      userList: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user => this.setState({userList:user}))\n  }\n\n  searchUsers = (e) => {\n    this.setState({\n      searchField: e.target.value\n    })\n  }\n  \n  render(){\n    const { userList , searchField } = this.state;\n    const filteredUser = userList.filter((user) => (\n      user.name.toLowerCase().includes(searchField.toLowerCase())\n    ))\n    return(\n      <div className='App'>\n        <SearchUser searchUsers={this.searchUsers} />\n        <CardList users={filteredUser} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}